#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('LifeGame:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// socket.io
var io = require('socket.io').listen(server);

var SCREEN_SIZE = 500;                    // キャンバスの幅
var SIDE_CELLS = 100;                     // 一辺のセルの数
var FPS = 20;                             // フレームレート

var field = new Array(SIDE_CELLS*SIDE_CELLS); // フィールド情報
var tempField = new Array(SIDE_CELLS*SIDE_CELLS); // フィールド情報の一時記憶用
// for (var i=0; i<field.length; i++) field[i] = Math.floor(Math.random()*2); // ランダムに「生」「死」を格納
var initFlag = true;

function update() {
	if(initFlag) initFlag = false;
	var n = 0;                    // 自身のまわりにある「生」の数
	tempField = field.slice(); // 複製
	for (var i=0; i<tempField.length; i++) {
		n = 0;
		for (var s=-1; s<2; s++) {
			for (var t=-1; t<2; t++) {
				if (s==0 && t==0) continue; // 自身はカウントしない
				var c = i+s*SIDE_CELLS+t;   // チェックするセル
					if (c>=0 && c<tempField.length) { // 配列からはみ出していないか(上下の壁判定も兼ねて)
						if (i<c && c%SIDE_CELLS!=0 || i>c && c%SIDE_CELLS!=SIDE_CELLS-1) { // 左右の壁判定
							if (tempField[c]) n ++; // 「生」だったらカウント
						}
					}
			}
		}
		if (tempField[i] && (n==2||n==3)) { // 自身が「生」でカウントが2か3
			field[i] = 1;    // 「生」
		} else if (!tempField[i] && n==3) { // 自身が「死」でカウントが3
			field[i] = 1;    // 「生」
		} else field[i] = 0; // 「死」
	}
	io.sockets.emit('send', field);                                    // canvasを更新
	setTimeout(update, 10000/FPS); // 再帰
}

io.sockets.on('connection', function(socket){
	if(initFlag) update();
	
	socket.on('click', function(i) {
		field[i] = 1;
		io.sockets.emit('send', field);
	});
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
